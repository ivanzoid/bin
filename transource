#!/usr/bin/env python
# -*- coding: UTF-8 -*-

from __future__ import print_function
import os
import sys
import unicodedata
import codecs
import re
from microsofttranslator import Translator

latin_letters= {}

def is_latin(uchr):
	try: return latin_letters[uchr]
	except KeyError:
		return latin_letters.setdefault(uchr, 'LATIN' in unicodedata.name(uchr))

def only_roman_chars(unistr):
	return all(is_latin(uchr)
		for uchr in unistr
		if uchr.isalpha())

if len(sys.argv) < 2:
	print('filename required')
	exit(0)

filename = sys.argv[1]
translator = Translator('bingtranz', 'FQedZxUgDI87VN8It8UzCyLAj9+NjZQ53IYv6XG5oaA=')
commentRegexp = re.compile(r'(.*)//(.*)')

i = 1
with codecs.open(filename, encoding='utf-8') as infile:
	for line in infile:
		searchResult = commentRegexp.search(line)
		comments = []
		if searchResult != None:
			comments = searchResult.groups()
		# sys.stderr.write(('%s\n' % (comments)).encode('utf-8'))
		if len(comments) < 2:
			sys.stdout.write(line.encode('utf-8'))
		else:
			if only_roman_chars(line):
				sys.stdout.write(line.encode('utf-8'))
			else:
				preComment = comments[0]
				comment = comments[1]
				sys.stderr.write('%s:%d: translating...\n' % (filename, i))
				translatedComment = translator.translate(comment, "en")
				if not translatedComment[:1] == ' ':
					translatedComment = ' ' + translatedComment
				outLine = '%s//%s' % (preComment, translatedComment)
				if not outLine[1:] == '\n':
					outLine = outLine + '\n'
				sys.stdout.write(outLine.encode('utf-8'))
		i = i + 1	

