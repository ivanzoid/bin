#!/usr/bin/env python

import os, optparse
import sys
from subprocess import *
import tempfile
import atexit


def which(program):
	"""Checks if a named executable exists on the $PATH"""
	for path in os.environ["PATH"].split(os.pathsep):
		fname = os.path.join(path, program)
		if os.path.exists(fname) and os.access(fname, os.X_OK):
			return True
	return False

for program in 'pdftk', 'pdf2ps', 'poster', 'ps2pdf':
	if not which(program):
		print >>sys.stderr, "%s is needed by PDFCrop but doesn't seem to be installed. Either install %s or check your PATH." % (program, program)
		sys.exit(1)

# A couple of string constants
license_info = """
Welcome to PDFCrop!  version 0.2  (copyright 2007 Eric Doviak, 2008 Mark Sherry)

PDFCrop is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
 
PDFCrop is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
 
You should have received a copy of the GNU General Public License
along with PDFCrop.  If not, see <http://www.gnu.org/licenses/>
"""

usage = """
PDFCrop automatically crops the white margins from a PDF document and 
rescales the pages to fit the paper in your printer. It makes the printed 
pages far more attractive to read!
 
Specifically, this utility will crop the pages down to the size of the
original postscript and scale them up to fit a standard sheet of paper.
"""

# Prepare the option parser
parser = optparse.OptionParser(usage="usage: %prog [options] input.pdf output.pdf", version="pdfcrop 0.2 by Eric Doviak and Mark Sherry")
parser.add_option("-s", "--size", dest="size", default="a4", help="cropped file size: one of letter, a4 or legal. Defaults to A4.")
parser.add_option("-m", "--margin", dest="margin", default="5", help="margin size. Defaults to 5. Percentile values are invalid.")
parser.add_option("-q", "--quiet", dest="verbose", default="True", help="don't print output", action="store_false")
parser.add_option("-l", "--license", dest="license", default=False, action="store_true", help="print license information")
parser.add_option("-a", "--about", dest="about", default=False, action="store_true", help="print extra usage information")

(options, args) = parser.parse_args()

# Make sure that both required filenames were provided
if len(args) < 1:
	print "Missing input file"
	sys.exit()
elif len(args) < 2:
	print "Missing output file"
	sys.exit()

# The user wants to see the license. Show it to them then quit.
if options.license:
	print license_info
	sys.exit()

# The user wants to see the extra details. Show it to them then quit.
if options.about:
	print usage
	sys.exit()

if options.size not in ('a4', 'legal', 'letter'):
	print >>sys.stderr, "Invalid paper size"
	sys.exit()

try: 
	margin = int(options.margin)
except:
	print >>sys.stderr, "Invalid margin size. Margin size must be an integer"
	sys.exit()

if options.verbose:
	print "Ready to crop and resize %s and create %s" % (args[0], args[1])


# Create a temporary directory in a way that avoids race conditions
tmpdir = tempfile.mkdtemp()
#print 'tmp dir: ' + tmpdir

# Set up an exit handler to clean up our temporary files
def cleanup():
	for root, dirs, files in os.walk(tmpdir, topdown=False):
		for name in files:
			os.remove(os.path.join(root, name))
		for name in dirs:
			os.rmdir(os.path.join(root, name))
	os.rmdir(tmpdir)
atexit.register(cleanup)

# Compute the absolute paths of the input and output files
absinput = os.path.abspath(args[0])
absoutput = os.path.abspath(args[1])

# Change the directory to the temporary directory, and let's start!
os.chdir(tmpdir)

# Split the PDF into individual pages
proc = Popen(['pdftk', absinput, 'burst'], stdout=PIPE, stderr=PIPE)
print absinput
out, err = proc.communicate()
if options.verbose:
	print out

print err

# If the operation wasn't successful, quit now.
if proc.returncode:
	print "pdftk exited with return code %i; quitting." % proc.returncode
	sys.exit(proc.returncode)

if options.verbose:
	print "Burst %s into separate files" % absinput

# The original version of this script parsed doc_data.txt to get the number of pages. Instead, we'll just process the files that we can see.

outnames = []

# Iterate over all the pg_ files in the directory, sorting them numerically.
# We'd sort them lexicographically, but if there are more than 9999 pages, it 
# might get things out of order.
for fname in sorted([x for x in os.listdir(tmpdir) if x.startswith('pg_')], key=lambda x: int(x[3:-4])):
	# Convert the page to postscript. We dump it to tmp.ps since poster won't 
	# read from STDIN
	pdf2ps = Popen(['pdf2ps', fname, 'tmp.ps'], stdout=PIPE, stderr=PIPE)
	out,err = pdf2ps.communicate()
	if err:
		print err
	if pdf2ps.returncode:
		print "pdf2ps had returncode %i" % pdf2ps.returncode
	# Trim out its excess whitespace
	poster = Popen(['poster', 'tmp.ps', '-c0', '-w%i%%' % margin, '-m%s' % options.size], stdin=PIPE, stdout=PIPE, stderr=PIPE)
	# And convert back to a PDF.
	ps2pdf = Popen(['ps2pdf', 'tmp.ps', fname.replace('pg_', 'pgout_')], stdin=PIPE, stdout=PIPE, stderr=PIPE)
	out, err = poster.communicate()
	if poster.returncode:
		print "poster had returncode %i" % poster.returncode
	if err:
		print err
	out, err = ps2pdf.communicate()
	#out, err = ps2pdf.communicate(out)
	if ps2pdf.returncode:
		print "ps2pdf had returncode %i" % ps2pdf.returncode
	#	Keep track of the files we create as we go, in the order that we processed 
	# them
	outnames.append(fname.replace("pg_", "pgout_"))
	# Inform the user of our progress	
	if options.verbose:
		print "Converted page %i" % int(fname[3:-4])

# Catenate the files into one big PDF again.
pdftk = Popen(['pdftk'] + outnames + ['cat', 'output', absoutput], stdout=PIPE, stderr=PIPE)
out,err = pdftk.communicate()
if pdftk.returncode:
	sys.exit()

if options.verbose:
	print "All done! %s has been created. Have fun!" % args[1]

